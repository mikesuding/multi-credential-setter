<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1567081476</version>
        <name>_beta_SNMP multi credential setter</name>
        <displayedas>_beta_SNMP multi credential setter</displayedas>
        <description>Tests an SNMPget during discovery script. If it works, it exits immediately and doesn&#39;t show an instance. If it fails, then it tries all creds that are set as properties in a group (z_Credentials). See http://blog.MikeSuding.com for details.</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>60</schedule>
        <appliesTo>join(system.groups,&#34;,&#34;) =~ &#34;z_Credentials&#34;</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;embeded&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;embeded&#34; </wildcardwincmdline>
        <wildcardgroovyscript>String targetGroupName = &#34;z_Credentials&#34; // change if desired to match YOUR group name

String LmAccessId  = hostProps.get(&#34;api.id&#34;)
String LmAccessKey = hostProps.get(&#34;api.key&#34;)
String LmAccount   = hostProps.get(&#34;api.company&#34;)

def showCredentialSuccess = hostProps.get(&#34;show_credential_success&#34;)

import groovy.json.JsonSlurper
import org.apache.commons.codec.binary.Hex
import org.apache.http.client.methods.*
import org.apache.http.impl.client.HttpClients
import org.apache.http.util.EntityUtils
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import com.santaba.agent.groovyapi.snmp.Snmp
import org.apache.http.entity.StringEntity
import groovy.time.TimeCategory

String LmHost = hostProps.get(&#34;system.hostname&#34;)
String LmDeviceId = hostProps.get(&#34;system.deviceId&#34;)

String testSnmpOid = &#34;.1.3.6.1.2.1.1.1.0&#34;
String propertyTypePostfix = &#34;.Type&#34;
String propertySnmvV2CommunityPostfix = &#34;.pass&#34;
String propertySnmpV3AuthKeyPostfix = &#34;.auth.key&#34;
String propertySnmpV3AuthTypePostfix = &#34;.auth.type&#34;
String propertySnmpV3PrivacyKeyPostfix = &#34;.privacy.key&#34;
String propertySnmpV3PrivacyTypePostfix = &#34;.privacy.type&#34;
String propertySnmpV3UserPostfix = &#34;.user&#34;

def listSnmpCredential = []
def scriptStartTime = new Date()

def GetCredentialsGroup(Account, AccessId, AccessKey, GroupName)
{
    resourcePath = &#34;/device/groups&#34;
    filterString = &#34;?filter=name:&#34; + GroupName
    url = &#34;https://&#34; + Account + &#34;.logicmonitor.com&#34; + &#34;/santaba/rest&#34; + resourcePath + filterString

    epoch = System.currentTimeMillis()
    requestVars = &#34;GET&#34; + epoch + resourcePath

    hmac = Mac.getInstance(&#34;HmacSHA256&#34;)
    secret = new SecretKeySpec(AccessKey.getBytes(), &#34;HmacSHA256&#34;)
    hmac.init(secret)
    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))
    signature = hmac_signed.bytes.encodeBase64()

    httpClient = HttpClients.createDefault()
    httpGet = new HttpGet(url)
    httpGet.addHeader(&#34;Authorization&#34; , &#34;LMv1 &#34; + AccessId + &#34;:&#34; + signature + &#34;:&#34; + epoch)
    httpResponse = httpClient.execute(httpGet)
    responseBody = EntityUtils.toString(httpResponse.getEntity())
    httpClient.close()

    if (httpResponse.getStatusLine().getStatusCode() != 200 )
    {
        return null
    }

    jsonSlurper = new JsonSlurper()
    responseObject = jsonSlurper.parseText(responseBody)

    //Check that API call returned data
    if (responseObject.data.total == 0)
    {
        return null
    }

    return responseObject
}

//Method will update custom properties of selected device
def SetDeviceCustomProperties(Account, AccessId, AccessKey, DeviceId, CustomContent)
{
    resourcePath = &#34;/device/devices/&#34; + DeviceId
    queryParams = &#39;?patchFields=customProperties&#38;opType=replace&#39;

    url = &#34;https://&#34; + Account + &#34;.logicmonitor.com&#34; + &#34;/santaba/rest&#34; + resourcePath + queryParams

    params = new StringEntity(CustomContent)

    httpVerb =&#39;PATCH&#39;
    epoch = System.currentTimeMillis()
    requestVars = httpVerb + epoch + CustomContent + resourcePath

    hmac = Mac.getInstance(&#34;HmacSHA256&#34;)
    secret = new SecretKeySpec(AccessKey.getBytes(), &#34;HmacSHA256&#34;)
    hmac.init(secret)
    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))
    signature = hmac_signed.bytes.encodeBase64()

    httpClient = HttpClients.createDefault()
    httpPatch = new HttpPatch(url)
    httpPatch.addHeader(&#34;Authorization&#34; , &#34;LMv1 &#34; + AccessId + &#34;:&#34; + signature + &#34;:&#34; + epoch)
    httpPatch.setEntity(params)
    httpPatch.setHeader(&#34;Accept&#34;, &#34;application/json&#34;);
    httpPatch.setHeader(&#34;Content-type&#34;, &#34;application/json&#34;);

    httpResponse = httpClient.execute(httpPatch)
    responseBody = EntityUtils.toString(httpResponse.getEntity())
    httpClient.close()

    if (httpResponse.getStatusLine().getStatusCode() != 200 )
    {
        return 1
    }

    return 0
}

//Method perform testing of SNMPv2 Credentials
def TestSmtpV2Credentials(host, community, oid)
{
    try
    {
        snmp_get = Snmp.get(host, community, &#34;v2&#34;, oid, 1000)
    }
    catch (ex)
    {
        return 1
    }
    return 0
}

//Method perform testing of SNMPv3 Credentials
def TestSmtpV3Credentials(host, security, authMethod, authToken, privMethod, privToken, oid)
{
    snmp_options = new HashMap()
    snmp_options.put(&#34;snmp.version&#34;, &#34;v3&#34;)
    snmp_options.put(&#34;snmp.security&#34;, security)
    snmp_options.put(&#34;snmp.auth&#34;, authMethod)
    snmp_options.put(&#34;snmp.authToken&#34;, authToken)
    snmp_options.put(&#34;snmp.priv&#34;, privMethod)
    snmp_options.put(&#34;snmp.privToken&#34;, privToken)

    try
    {
        snmp_get = Snmp.get(host, oid, snmp_options, 1000)
    }
    catch (ex)
    {
        return 1
    }
    return 0
}


snmp2CheckSucessful = false
snmp3CheckSucessful = false

// Check SNMPv2 creds:
propertySnmpVersion = hostProps.get(&#34;snmp.version&#34;)
if (propertySnmpVersion == &#39;v2c&#39;)
{
    communityProperty = hostProps.get(&#34;snmp.community&#34;)

    if (TestSmtpV2Credentials(LmHost, communityProperty, testSnmpOid) == 0)
    {
        snmp2CheckSucessful = true
    }
}
//Check SNMPv3 creds:
else if (propertySnmpVersion == &#39;v3&#39;)
{
    securityProperty = hostProps.get(&#34;snmp.security&#34;)
    authMethodProperty = hostProps.get(&#34;snmp.auth&#34;)
    authTokenProperty = hostProps.get(&#34;snmp.authToken&#34;)
    privMethodProperty = hostProps.get(&#34;snmp.priv&#34;)
    privTokenProperty = hostProps.get(&#34;snmp.privToken&#34;)

    if (TestSmtpV3Credentials(LmHost, securityProperty, authMethodProperty, authTokenProperty, privMethodProperty, privTokenProperty, testSnmpOid) == 0)
    {
        snmp3CheckSucessful = true
    }
}

//Current Snmp credentials OK, changes not necessary
if (snmp2CheckSucessful || snmp3CheckSucessful)
{
    //print debug information
    if (showCredentialSuccess != null)
    {
        now = new Date()
        timeDiff = TimeCategory.minus(now, scriptStartTime).seconds
        println &#34;0##Success: existing creds worked at &#34; + now.format(&#34;h:mm a&#34;) + &#34; (&#34; + timeDiff + &#34; secs) ##Hide this by removing show_credential_success property on this device&#34;
    }
    return 0
}

targetGroup = GetCredentialsGroup(LmAccount, LmAccessId, LmAccessKey, targetGroupName)
//check target group discovered sucessfull
if (targetGroup == null)
{
    println &#34;2##Error: Credentials Group not discovered##Add group &#34; + targetGroupName
    return 0
}
targetGroupProperties = targetGroup.data.items[0].customProperties


//Search every custom property record for Type pattern in name
targetGroupProperties.each{
    if (it.name.indexOf(propertyTypePostfix) &#62; 0)
    {
        ind = it.name.indexOf(propertyTypePostfix) - 1

        //Compare with snmpv2 string, if yes, create map, extract index, extract community
        if (it.value.toLowerCase() == &#34;snmpv2&#34;)
        {
            credentialMap = [:]
            credentialMap.index = it.name[0..ind].toInteger()
            credentialMap.version = 2
            credentialMap.community = hostProps.get(credentialMap.index + propertySnmvV2CommunityPostfix)

            listSnmpCredential += credentialMap
        }
        else if (it.value.toLowerCase() == &#34;snmpv3&#34;)
        {
            credentialMap = [:]
            credentialMap.index = it.name[0..ind].toInteger()
            credentialMap.version = 3
            credentialMap.authKey = hostProps.get(credentialMap.index + propertySnmpV3AuthKeyPostfix)
            credentialMap.authType = hostProps.get(credentialMap.index + propertySnmpV3AuthTypePostfix)
            credentialMap.privacyKey = hostProps.get(credentialMap.index + propertySnmpV3PrivacyKeyPostfix)
            credentialMap.privacyType = hostProps.get(credentialMap.index + propertySnmpV3PrivacyTypePostfix)
            credentialMap.user = hostProps.get(credentialMap.index + propertySnmpV3UserPostfix)

            listSnmpCredential += credentialMap
        }
    }
}

listSnmpCredential.sort {it.index}
numberOfCredentials = listSnmpCredential.size()

//Start checking snmp creds
for (i = 0; i &#60; numberOfCredentials; i++)
{
    if (listSnmpCredential[i].version == 3)
    {
        if (TestSmtpV3Credentials(LmHost, listSnmpCredential[i].user, listSnmpCredential[i].authType, listSnmpCredential[i].authKey, listSnmpCredential[i].privacyType, listSnmpCredential[i].privacyKey, testSnmpOid) == 0)
        {
            data = &#39;{&#34;customProperties&#34;:[{&#34;name&#34;:&#34;snmp.version&#34;,&#34;value&#34;:&#34;v3&#34;},{&#34;name&#34;:&#34;snmp.auth&#34;,&#34;value&#34;:&#34;&#39; + listSnmpCredential[i].authType + &#39;&#34;},{&#34;name&#34;:&#34;snmp.authToken&#34;,&#34;value&#34;:&#34;&#39; + listSnmpCredential[i].authKey + &#39;&#34;},{&#34;name&#34;:&#34;snmp.priv&#34;,&#34;value&#34;:&#34;&#39; + listSnmpCredential[i].privacyType + &#39;&#34;},{&#34;name&#34;:&#34;snmp.privToken&#34;,&#34;value&#34;:&#34;&#39; + listSnmpCredential[i].privacyKey + &#39;&#34;},{&#34;name&#34;:&#34;snmp.security&#34;,&#34;value&#34;:&#34;&#39; + listSnmpCredential[i].user + &#39;&#34;}]}&#39;
            SetDeviceCustomProperties(LmAccount, LmAccessId, LmAccessKey, LmDeviceId, data)

            snmp3CheckSucessful = true
            break
        }
    }
    else if (listSnmpCredential[i].version == 2)
    {
        if (TestSmtpV2Credentials(LmHost, listSnmpCredential[i].community, testSnmpOid) == 0)
        {
            //SET PROPERTIES
            data = &#39;{&#34;customProperties&#34;:[{&#34;name&#34;:&#34;snmp.version&#34;,&#34;value&#34;:&#34;v2c&#34;},{&#34;name&#34;:&#34;snmp.community&#34;,&#34;value&#34;:&#34;&#39; + listSnmpCredential[i].community + &#39;&#34;}]}&#39;
            SetDeviceCustomProperties(LmAccount, LmAccessId, LmAccessKey, LmDeviceId, data)

            snmp2CheckSucessful = true
            break
        }
    }
}

//TODO: if snmp check sucessful - print result if necessary
if (snmp2CheckSucessful || snmp3CheckSucessful)
{
    //print debug information
    if (showCredentialSuccess != null)
    {
        now = new Date()
        timeDiff = TimeCategory.minus(now, scriptStartTime).seconds
        println &#34;1##Success: SNMP creds updated at &#34; + now.format(&#34;h:mm a&#34;) + &#34; (&#34; + timeDiff + &#34; secs) ##Hide this by removing show_credential_success property on this device&#34;
    }
}
else
{
    now = new Date()
    timeDiff = TimeCategory.minus(now, scriptStartTime).seconds
    println &#34;2##Error: &#34; + numberOfCredentials + &#34; SNMP credentials failed at &#34; + now.format(&#34;h:mm a&#34;) + &#34; (&#34; + timeDiff + &#34; secs) ##Fix credentials in group &#34; + targetGroupName
}
return 0</wildcardgroovyscript>
        <wildcardschedule>15</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>true</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>Requires api.id, api.key, api.company properties to be set on the z_Credentials group or above (i.e. root)</technology>
        <adlist><![CDATA[{"agdmethod":"none","method":"ad_script","agdparams":"","id":0,"filters":[],"params":{"type":"embeded","groovyscript":"String targetGroupName = \"z_Credentials\" // change if desired to match YOUR group name\r\n\r\nString LmAccessId  = hostProps.get(\"api.id\")\r\nString LmAccessKey = hostProps.get(\"api.key\")\r\nString LmAccount   = hostProps.get(\"api.company\")\r\n\r\ndef showCredentialSuccess = hostProps.get(\"show_credential_success\")\r\n\r\nimport groovy.json.JsonSlurper\r\nimport org.apache.commons.codec.binary.Hex\r\nimport org.apache.http.client.methods.*\r\nimport org.apache.http.impl.client.HttpClients\r\nimport org.apache.http.util.EntityUtils\r\nimport javax.crypto.Mac\r\nimport javax.crypto.spec.SecretKeySpec\r\nimport com.santaba.agent.groovyapi.snmp.Snmp\r\nimport org.apache.http.entity.StringEntity\r\nimport groovy.time.TimeCategory\r\n\r\nString LmHost = hostProps.get(\"system.hostname\")\r\nString LmDeviceId = hostProps.get(\"system.deviceId\")\r\n\r\nString testSnmpOid = \".1.3.6.1.2.1.1.1.0\"\r\nString propertyTypePostfix = \".Type\"\r\nString propertySnmvV2CommunityPostfix = \".pass\"\r\nString propertySnmpV3AuthKeyPostfix = \".auth.key\"\r\nString propertySnmpV3AuthTypePostfix = \".auth.type\"\r\nString propertySnmpV3PrivacyKeyPostfix = \".privacy.key\"\r\nString propertySnmpV3PrivacyTypePostfix = \".privacy.type\"\r\nString propertySnmpV3UserPostfix = \".user\"\r\n\r\ndef listSnmpCredential = []\r\ndef scriptStartTime = new Date()\r\n\r\ndef GetCredentialsGroup(Account, AccessId, AccessKey, GroupName)\r\n{\r\n    resourcePath = \"/device/groups\"\r\n    filterString = \"?filter=name:\" + GroupName\r\n    url = \"https://\" + Account + \".logicmonitor.com\" + \"/santaba/rest\" + resourcePath + filterString\r\n\r\n    epoch = System.currentTimeMillis()\r\n    requestVars = \"GET\" + epoch + resourcePath\r\n\r\n    hmac = Mac.getInstance(\"HmacSHA256\")\r\n    secret = new SecretKeySpec(AccessKey.getBytes(), \"HmacSHA256\")\r\n    hmac.init(secret)\r\n    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))\r\n    signature = hmac_signed.bytes.encodeBase64()\r\n\r\n    httpClient = HttpClients.createDefault()\r\n    httpGet = new HttpGet(url)\r\n    httpGet.addHeader(\"Authorization\" , \"LMv1 \" + AccessId + \":\" + signature + \":\" + epoch)\r\n    httpResponse = httpClient.execute(httpGet)\r\n    responseBody = EntityUtils.toString(httpResponse.getEntity())\r\n    httpClient.close()\r\n\r\n    if (httpResponse.getStatusLine().getStatusCode() != 200 )\r\n    {\r\n        return null\r\n    }\r\n\r\n    jsonSlurper = new JsonSlurper()\r\n    responseObject = jsonSlurper.parseText(responseBody)\r\n\r\n    //Check that API call returned data\r\n    if (responseObject.data.total == 0)\r\n    {\r\n        return null\r\n    }\r\n\r\n    return responseObject\r\n}\r\n\r\n//Method will update custom properties of selected device\r\ndef SetDeviceCustomProperties(Account, AccessId, AccessKey, DeviceId, CustomContent)\r\n{\r\n    resourcePath = \"/device/devices/\" + DeviceId\r\n    queryParams = '?patchFields=customProperties&opType=replace'\r\n\r\n    url = \"https://\" + Account + \".logicmonitor.com\" + \"/santaba/rest\" + resourcePath + queryParams\r\n\r\n    params = new StringEntity(CustomContent)\r\n\r\n    httpVerb ='PATCH'\r\n    epoch = System.currentTimeMillis()\r\n    requestVars = httpVerb + epoch + CustomContent + resourcePath\r\n\r\n    hmac = Mac.getInstance(\"HmacSHA256\")\r\n    secret = new SecretKeySpec(AccessKey.getBytes(), \"HmacSHA256\")\r\n    hmac.init(secret)\r\n    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))\r\n    signature = hmac_signed.bytes.encodeBase64()\r\n\r\n    httpClient = HttpClients.createDefault()\r\n    httpPatch = new HttpPatch(url)\r\n    httpPatch.addHeader(\"Authorization\" , \"LMv1 \" + AccessId + \":\" + signature + \":\" + epoch)\r\n    httpPatch.setEntity(params)\r\n    httpPatch.setHeader(\"Accept\", \"application/json\");\r\n    httpPatch.setHeader(\"Content-type\", \"application/json\");\r\n\r\n    httpResponse = httpClient.execute(httpPatch)\r\n    responseBody = EntityUtils.toString(httpResponse.getEntity())\r\n    httpClient.close()\r\n\r\n    if (httpResponse.getStatusLine().getStatusCode() != 200 )\r\n    {\r\n        return 1\r\n    }\r\n\r\n    return 0\r\n}\r\n\r\n//Method perform testing of SNMPv2 Credentials\r\ndef TestSmtpV2Credentials(host, community, oid)\r\n{\r\n    try\r\n    {\r\n        snmp_get = Snmp.get(host, community, \"v2\", oid, 1000)\r\n    }\r\n    catch (ex)\r\n    {\r\n        return 1\r\n    }\r\n    return 0\r\n}\r\n\r\n//Method perform testing of SNMPv3 Credentials\r\ndef TestSmtpV3Credentials(host, security, authMethod, authToken, privMethod, privToken, oid)\r\n{\r\n    snmp_options = new HashMap()\r\n    snmp_options.put(\"snmp.version\", \"v3\")\r\n    snmp_options.put(\"snmp.security\", security)\r\n    snmp_options.put(\"snmp.auth\", authMethod)\r\n    snmp_options.put(\"snmp.authToken\", authToken)\r\n    snmp_options.put(\"snmp.priv\", privMethod)\r\n    snmp_options.put(\"snmp.privToken\", privToken)\r\n\r\n    try\r\n    {\r\n        snmp_get = Snmp.get(host, oid, snmp_options, 1000)\r\n    }\r\n    catch (ex)\r\n    {\r\n        return 1\r\n    }\r\n    return 0\r\n}\r\n\r\n\r\nsnmp2CheckSucessful = false\r\nsnmp3CheckSucessful = false\r\n\r\n// Check SNMPv2 creds:\r\npropertySnmpVersion = hostProps.get(\"snmp.version\")\r\nif (propertySnmpVersion == 'v2c')\r\n{\r\n    communityProperty = hostProps.get(\"snmp.community\")\r\n\r\n    if (TestSmtpV2Credentials(LmHost, communityProperty, testSnmpOid) == 0)\r\n    {\r\n        snmp2CheckSucessful = true\r\n    }\r\n}\r\n//Check SNMPv3 creds:\r\nelse if (propertySnmpVersion == 'v3')\r\n{\r\n    securityProperty = hostProps.get(\"snmp.security\")\r\n    authMethodProperty = hostProps.get(\"snmp.auth\")\r\n    authTokenProperty = hostProps.get(\"snmp.authToken\")\r\n    privMethodProperty = hostProps.get(\"snmp.priv\")\r\n    privTokenProperty = hostProps.get(\"snmp.privToken\")\r\n\r\n    if (TestSmtpV3Credentials(LmHost, securityProperty, authMethodProperty, authTokenProperty, privMethodProperty, privTokenProperty, testSnmpOid) == 0)\r\n    {\r\n        snmp3CheckSucessful = true\r\n    }\r\n}\r\n\r\n//Current Snmp credentials OK, changes not necessary\r\nif (snmp2CheckSucessful || snmp3CheckSucessful)\r\n{\r\n    //print debug information\r\n    if (showCredentialSuccess != null)\r\n    {\r\n        now = new Date()\r\n        timeDiff = TimeCategory.minus(now, scriptStartTime).seconds\r\n        println \"0##Success: existing creds worked at \" + now.format(\"h:mm a\") + \" (\" + timeDiff + \" secs) ##Hide this by removing show_credential_success property on this device\"\r\n    }\r\n    return 0\r\n}\r\n\r\ntargetGroup = GetCredentialsGroup(LmAccount, LmAccessId, LmAccessKey, targetGroupName)\r\n//check target group discovered sucessfull\r\nif (targetGroup == null)\r\n{\r\n    println \"2##Error: Credentials Group not discovered##Add group \" + targetGroupName\r\n    return 0\r\n}\r\ntargetGroupProperties = targetGroup.data.items[0].customProperties\r\n\r\n\r\n//Search every custom property record for Type pattern in name\r\ntargetGroupProperties.each{\r\n    if (it.name.indexOf(propertyTypePostfix) > 0)\r\n    {\r\n        ind = it.name.indexOf(propertyTypePostfix) - 1\r\n\r\n        //Compare with snmpv2 string, if yes, create map, extract index, extract community\r\n        if (it.value.toLowerCase() == \"snmpv2\")\r\n        {\r\n            credentialMap = [:]\r\n            credentialMap.index = it.name[0..ind].toInteger()\r\n            credentialMap.version = 2\r\n            credentialMap.community = hostProps.get(credentialMap.index + propertySnmvV2CommunityPostfix)\r\n\r\n            listSnmpCredential += credentialMap\r\n        }\r\n        else if (it.value.toLowerCase() == \"snmpv3\")\r\n        {\r\n            credentialMap = [:]\r\n            credentialMap.index = it.name[0..ind].toInteger()\r\n            credentialMap.version = 3\r\n            credentialMap.authKey = hostProps.get(credentialMap.index + propertySnmpV3AuthKeyPostfix)\r\n            credentialMap.authType = hostProps.get(credentialMap.index + propertySnmpV3AuthTypePostfix)\r\n            credentialMap.privacyKey = hostProps.get(credentialMap.index + propertySnmpV3PrivacyKeyPostfix)\r\n            credentialMap.privacyType = hostProps.get(credentialMap.index + propertySnmpV3PrivacyTypePostfix)\r\n            credentialMap.user = hostProps.get(credentialMap.index + propertySnmpV3UserPostfix)\r\n\r\n            listSnmpCredential += credentialMap\r\n        }\r\n    }\r\n}\r\n\r\nlistSnmpCredential.sort {it.index}\r\nnumberOfCredentials = listSnmpCredential.size()\r\n\r\n//Start checking snmp creds\r\nfor (i = 0; i < numberOfCredentials; i++)\r\n{\r\n    if (listSnmpCredential[i].version == 3)\r\n    {\r\n        if (TestSmtpV3Credentials(LmHost, listSnmpCredential[i].user, listSnmpCredential[i].authType, listSnmpCredential[i].authKey, listSnmpCredential[i].privacyType, listSnmpCredential[i].privacyKey, testSnmpOid) == 0)\r\n        {\r\n            data = '{\"customProperties\":[{\"name\":\"snmp.version\",\"value\":\"v3\"},{\"name\":\"snmp.auth\",\"value\":\"' + listSnmpCredential[i].authType + '\"},{\"name\":\"snmp.authToken\",\"value\":\"' + listSnmpCredential[i].authKey + '\"},{\"name\":\"snmp.priv\",\"value\":\"' + listSnmpCredential[i].privacyType + '\"},{\"name\":\"snmp.privToken\",\"value\":\"' + listSnmpCredential[i].privacyKey + '\"},{\"name\":\"snmp.security\",\"value\":\"' + listSnmpCredential[i].user + '\"}]}'\r\n            SetDeviceCustomProperties(LmAccount, LmAccessId, LmAccessKey, LmDeviceId, data)\r\n\r\n            snmp3CheckSucessful = true\r\n            break\r\n        }\r\n    }\r\n    else if (listSnmpCredential[i].version == 2)\r\n    {\r\n        if (TestSmtpV2Credentials(LmHost, listSnmpCredential[i].community, testSnmpOid) == 0)\r\n        {\r\n            //SET PROPERTIES\r\n            data = '{\"customProperties\":[{\"name\":\"snmp.version\",\"value\":\"v2c\"},{\"name\":\"snmp.community\",\"value\":\"' + listSnmpCredential[i].community + '\"}]}'\r\n            SetDeviceCustomProperties(LmAccount, LmAccessId, LmAccessKey, LmDeviceId, data)\r\n\r\n            snmp2CheckSucessful = true\r\n            break\r\n        }\r\n    }\r\n}\r\n\r\n//TODO: if snmp check sucessful - print result if necessary\r\nif (snmp2CheckSucessful || snmp3CheckSucessful)\r\n{\r\n    //print debug information\r\n    if (showCredentialSuccess != null)\r\n    {\r\n        now = new Date()\r\n        timeDiff = TimeCategory.minus(now, scriptStartTime).seconds\r\n        println \"1##Success: SNMP creds updated at \" + now.format(\"h:mm a\") + \" (\" + timeDiff + \" secs) ##Hide this by removing show_credential_success property on this device\"\r\n    }\r\n}\r\nelse\r\n{\r\n    now = new Date()\r\n    timeDiff = TimeCategory.minus(now, scriptStartTime).seconds\r\n    println \"2##Error: \" + numberOfCredentials + \" SNMP credentials failed at \" + now.format(\"h:mm a\") + \" (\" + timeDiff + \" secs) ##Fix credentials in group \" + targetGroupName\r\n}\r\nreturn 0"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>println &#34;0.credential_status=0&#34; // already good
println &#34;1.credential_status=1&#34; // successfully changed
println &#34;2.credential_status=2&#34; // all failed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>credential_status</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##wildvalue##.credential_status</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr>&#62; 1 timezone=America/Los_Angeles</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>0=already good, 1=successfully changed, 2=all creds failed</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>time_it_took</name>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>responseTime</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Credential Status</name>
            <title>Credential Status</title>
            <verticallabel>0=ok, 1=changed, 2=all failed</verticallabel>
            <rigid>false</rigid>
            <maxvalue>5.0</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>credential_status</name>
            <datapointname>credential_status</datapointname>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>credential_status</legend>
                <color>orange</color>
                <datapointname>credential_status</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
